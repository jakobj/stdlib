import sim;
import std;

template<pint N; pint data[N]; pint W>
defproc check_sink(chan?(int<W>) I)
{
  int<W> x, y;
  int i;
  chp {
    *[ i := 0;
       *[ i < N -> I?x;
                   [([]k:N: i=k -> y:= data[k];
                                   [ x = y -> skip
                                     [] else -> log ("ASSERTION failed, value mismatch; expected: ", y, "%x (0x", y, "); got: ", x, "%x (0x", x, ")")
                                   ]
                   )];
                   i := i + 1
        ]
     ]
  }
}

defproc adder(chan?(int) A, B; chan!(int) C)
{
    int a, b;
    chp {
        *[ A?a, B?b; C!(a+b) ]
    }
}

defproc test_adder() {
    adder dut;
    sim::source_seq<32, false, 3, {3,5,2}> s1(dut.A);
    sim::source_seq<32, false, 3, {7,9,3}> s2(dut.B);
    check_sink<3, {10, 14, 5}, 32> sx(dut.C);
}

defproc test_pow() {
    (i:9: {std::pow(i, 1) = i};)
    (i:9: {std::pow(i, 2) = i*i};)
    (i:9: {std::pow(i, 3) = i*i*i};)
}
